/*
 * Generated by Bluespec Compiler, version 2023.07 (build 0eb551d)
 * 
 * On Thu Feb 29 10:33:32 CET 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkVectorDot.h"


/* String declarations */
static std::string const __str_literal_3("ERROR: %m: mkBRAMAdapter overrun", 32u);
static std::string const __str_literal_1("v1.hex", 6u);
static std::string const __str_literal_2("v2.hex", 6u);


/* Constructor */
MOD_mkVectorDot::MOD_mkVectorDot(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_a_memory(simHdl, "a_memory", this, __str_literal_1, (tUInt8)0u, 8u, 32u, 256u, (tUInt8)0u, 1u),
    INST_a_serverAdapter_cnt(simHdl, "a_serverAdapter_cnt", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_a_serverAdapter_cnt_1(simHdl, "a_serverAdapter_cnt_1", this, 3u, (tUInt8)0u),
    INST_a_serverAdapter_cnt_2(simHdl, "a_serverAdapter_cnt_2", this, 3u, (tUInt8)0u),
    INST_a_serverAdapter_cnt_3(simHdl, "a_serverAdapter_cnt_3", this, 3u, (tUInt8)0u),
    INST_a_serverAdapter_outData_beforeDeq(simHdl,
					   "a_serverAdapter_outData_beforeDeq",
					   this,
					   1u,
					   (tUInt8)1u),
    INST_a_serverAdapter_outData_beforeEnq(simHdl,
					   "a_serverAdapter_outData_beforeEnq",
					   this,
					   1u,
					   (tUInt8)1u),
    INST_a_serverAdapter_outData_dequeueing(simHdl, "a_serverAdapter_outData_dequeueing", this, 0u),
    INST_a_serverAdapter_outData_enqw(simHdl, "a_serverAdapter_outData_enqw", this, 32u, (tUInt8)0u),
    INST_a_serverAdapter_outData_ff(simHdl,
				    "a_serverAdapter_outData_ff",
				    this,
				    32u,
				    3u,
				    (tUInt8)0u,
				    0u),
    INST_a_serverAdapter_s1(simHdl, "a_serverAdapter_s1", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_a_serverAdapter_s1_1(simHdl, "a_serverAdapter_s1_1", this, 2u, (tUInt8)0u),
    INST_a_serverAdapter_writeWithResp(simHdl, "a_serverAdapter_writeWithResp", this, 2u, (tUInt8)0u),
    INST_b_memory(simHdl, "b_memory", this, __str_literal_2, (tUInt8)0u, 8u, 32u, 256u, (tUInt8)0u, 1u),
    INST_b_serverAdapter_cnt(simHdl, "b_serverAdapter_cnt", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_b_serverAdapter_cnt_1(simHdl, "b_serverAdapter_cnt_1", this, 3u, (tUInt8)0u),
    INST_b_serverAdapter_cnt_2(simHdl, "b_serverAdapter_cnt_2", this, 3u, (tUInt8)0u),
    INST_b_serverAdapter_cnt_3(simHdl, "b_serverAdapter_cnt_3", this, 3u, (tUInt8)0u),
    INST_b_serverAdapter_outData_beforeDeq(simHdl,
					   "b_serverAdapter_outData_beforeDeq",
					   this,
					   1u,
					   (tUInt8)1u),
    INST_b_serverAdapter_outData_beforeEnq(simHdl,
					   "b_serverAdapter_outData_beforeEnq",
					   this,
					   1u,
					   (tUInt8)1u),
    INST_b_serverAdapter_outData_dequeueing(simHdl, "b_serverAdapter_outData_dequeueing", this, 0u),
    INST_b_serverAdapter_outData_enqw(simHdl, "b_serverAdapter_outData_enqw", this, 32u, (tUInt8)0u),
    INST_b_serverAdapter_outData_ff(simHdl,
				    "b_serverAdapter_outData_ff",
				    this,
				    32u,
				    3u,
				    (tUInt8)0u,
				    0u),
    INST_b_serverAdapter_s1(simHdl, "b_serverAdapter_s1", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_b_serverAdapter_s1_1(simHdl, "b_serverAdapter_s1_1", this, 2u, (tUInt8)0u),
    INST_b_serverAdapter_writeWithResp(simHdl, "b_serverAdapter_writeWithResp", this, 2u, (tUInt8)0u),
    INST_dim(simHdl, "dim", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_done_a(simHdl, "done_a", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_done_all(simHdl, "done_all", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_done_b(simHdl, "done_b", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_i(simHdl, "i", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_output_res(simHdl, "output_res", this, 32u, 0u, (tUInt8)0u),
    INST_pos_a(simHdl, "pos_a", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_pos_b(simHdl, "pos_b", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_pos_out(simHdl, "pos_out", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_ready_start(simHdl, "ready_start", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_req_a_ready(simHdl, "req_a_ready", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_req_b_ready(simHdl, "req_b_ready", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_EN_start = false;
  symbol_count = 61u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkVectorDot::init_symbols_0()
{
  init_symbol(&symbols[0u], "a_memory", SYM_MODULE, &INST_a_memory);
  init_symbol(&symbols[1u], "a_serverAdapter_cnt", SYM_MODULE, &INST_a_serverAdapter_cnt);
  init_symbol(&symbols[2u], "a_serverAdapter_cnt_1", SYM_MODULE, &INST_a_serverAdapter_cnt_1);
  init_symbol(&symbols[3u], "a_serverAdapter_cnt_2", SYM_MODULE, &INST_a_serverAdapter_cnt_2);
  init_symbol(&symbols[4u], "a_serverAdapter_cnt_3", SYM_MODULE, &INST_a_serverAdapter_cnt_3);
  init_symbol(&symbols[5u],
	      "a_serverAdapter_outData_beforeDeq",
	      SYM_MODULE,
	      &INST_a_serverAdapter_outData_beforeDeq);
  init_symbol(&symbols[6u],
	      "a_serverAdapter_outData_beforeEnq",
	      SYM_MODULE,
	      &INST_a_serverAdapter_outData_beforeEnq);
  init_symbol(&symbols[7u],
	      "a_serverAdapter_outData_dequeueing",
	      SYM_MODULE,
	      &INST_a_serverAdapter_outData_dequeueing);
  init_symbol(&symbols[8u],
	      "a_serverAdapter_outData_enqw",
	      SYM_MODULE,
	      &INST_a_serverAdapter_outData_enqw);
  init_symbol(&symbols[9u],
	      "a_serverAdapter_outData_ff",
	      SYM_MODULE,
	      &INST_a_serverAdapter_outData_ff);
  init_symbol(&symbols[10u], "a_serverAdapter_s1", SYM_MODULE, &INST_a_serverAdapter_s1);
  init_symbol(&symbols[11u], "a_serverAdapter_s1_1", SYM_MODULE, &INST_a_serverAdapter_s1_1);
  init_symbol(&symbols[12u],
	      "a_serverAdapter_writeWithResp",
	      SYM_MODULE,
	      &INST_a_serverAdapter_writeWithResp);
  init_symbol(&symbols[13u], "b__h2341", SYM_DEF, &DEF_b__h2341, 3u);
  init_symbol(&symbols[14u], "b__h868", SYM_DEF, &DEF_b__h868, 3u);
  init_symbol(&symbols[15u], "b_memory", SYM_MODULE, &INST_b_memory);
  init_symbol(&symbols[16u], "b_serverAdapter_cnt", SYM_MODULE, &INST_b_serverAdapter_cnt);
  init_symbol(&symbols[17u], "b_serverAdapter_cnt_1", SYM_MODULE, &INST_b_serverAdapter_cnt_1);
  init_symbol(&symbols[18u], "b_serverAdapter_cnt_2", SYM_MODULE, &INST_b_serverAdapter_cnt_2);
  init_symbol(&symbols[19u], "b_serverAdapter_cnt_3", SYM_MODULE, &INST_b_serverAdapter_cnt_3);
  init_symbol(&symbols[20u],
	      "b_serverAdapter_outData_beforeDeq",
	      SYM_MODULE,
	      &INST_b_serverAdapter_outData_beforeDeq);
  init_symbol(&symbols[21u],
	      "b_serverAdapter_outData_beforeEnq",
	      SYM_MODULE,
	      &INST_b_serverAdapter_outData_beforeEnq);
  init_symbol(&symbols[22u],
	      "b_serverAdapter_outData_dequeueing",
	      SYM_MODULE,
	      &INST_b_serverAdapter_outData_dequeueing);
  init_symbol(&symbols[23u],
	      "b_serverAdapter_outData_enqw",
	      SYM_MODULE,
	      &INST_b_serverAdapter_outData_enqw);
  init_symbol(&symbols[24u],
	      "b_serverAdapter_outData_ff",
	      SYM_MODULE,
	      &INST_b_serverAdapter_outData_ff);
  init_symbol(&symbols[25u], "b_serverAdapter_s1", SYM_MODULE, &INST_b_serverAdapter_s1);
  init_symbol(&symbols[26u], "b_serverAdapter_s1_1", SYM_MODULE, &INST_b_serverAdapter_s1_1);
  init_symbol(&symbols[27u],
	      "b_serverAdapter_writeWithResp",
	      SYM_MODULE,
	      &INST_b_serverAdapter_writeWithResp);
  init_symbol(&symbols[28u], "dim", SYM_MODULE, &INST_dim);
  init_symbol(&symbols[29u], "done_a", SYM_MODULE, &INST_done_a);
  init_symbol(&symbols[30u], "done_all", SYM_MODULE, &INST_done_all);
  init_symbol(&symbols[31u], "done_all__h3781", SYM_DEF, &DEF_done_all__h3781, 1u);
  init_symbol(&symbols[32u], "done_b", SYM_MODULE, &INST_done_b);
  init_symbol(&symbols[33u], "EN_start", SYM_PORT, &PORT_EN_start, 1u);
  init_symbol(&symbols[34u], "i", SYM_MODULE, &INST_i);
  init_symbol(&symbols[35u], "output_res", SYM_MODULE, &INST_output_res);
  init_symbol(&symbols[36u], "pos_a", SYM_MODULE, &INST_pos_a);
  init_symbol(&symbols[37u], "pos_b", SYM_MODULE, &INST_pos_b);
  init_symbol(&symbols[38u], "pos_out", SYM_MODULE, &INST_pos_out);
  init_symbol(&symbols[39u], "RL_a_serverAdapter_cnt_finalAdd", SYM_RULE);
  init_symbol(&symbols[40u], "RL_a_serverAdapter_moveToOutFIFO", SYM_RULE);
  init_symbol(&symbols[41u], "RL_a_serverAdapter_outData_dequeue", SYM_RULE);
  init_symbol(&symbols[42u], "RL_a_serverAdapter_outData_enqueue", SYM_RULE);
  init_symbol(&symbols[43u], "RL_a_serverAdapter_overRun", SYM_RULE);
  init_symbol(&symbols[44u], "RL_a_serverAdapter_s1__dreg_update", SYM_RULE);
  init_symbol(&symbols[45u], "RL_a_serverAdapter_stageReadResponseAlways", SYM_RULE);
  init_symbol(&symbols[46u], "RL_b_serverAdapter_cnt_finalAdd", SYM_RULE);
  init_symbol(&symbols[47u], "RL_b_serverAdapter_moveToOutFIFO", SYM_RULE);
  init_symbol(&symbols[48u], "RL_b_serverAdapter_outData_dequeue", SYM_RULE);
  init_symbol(&symbols[49u], "RL_b_serverAdapter_outData_enqueue", SYM_RULE);
  init_symbol(&symbols[50u], "RL_b_serverAdapter_overRun", SYM_RULE);
  init_symbol(&symbols[51u], "RL_b_serverAdapter_s1__dreg_update", SYM_RULE);
  init_symbol(&symbols[52u], "RL_b_serverAdapter_stageReadResponseAlways", SYM_RULE);
  init_symbol(&symbols[53u], "RL_mult_inputs", SYM_RULE);
  init_symbol(&symbols[54u], "RL_process_a", SYM_RULE);
  init_symbol(&symbols[55u], "RL_process_b", SYM_RULE);
  init_symbol(&symbols[56u], "ready_start", SYM_MODULE, &INST_ready_start);
  init_symbol(&symbols[57u], "ready_start__h3375", SYM_DEF, &DEF_ready_start__h3375, 1u);
  init_symbol(&symbols[58u], "req_a_ready", SYM_MODULE, &INST_req_a_ready);
  init_symbol(&symbols[59u], "req_b_ready", SYM_MODULE, &INST_req_b_ready);
  init_symbol(&symbols[60u], "WILL_FIRE_start", SYM_DEF, &DEF_WILL_FIRE_start, 1u);
}


/* Rule actions */

void MOD_mkVectorDot::RL_a_serverAdapter_outData_enqueue()
{
  DEF_x_wget__h374 = INST_a_serverAdapter_outData_enqw.METH_wget();
  DEF_x__h472 = DEF_x_wget__h374;
  INST_a_serverAdapter_outData_ff.METH_enq(DEF_x__h472);
}

void MOD_mkVectorDot::RL_a_serverAdapter_outData_dequeue()
{
  INST_a_serverAdapter_outData_ff.METH_deq();
}

void MOD_mkVectorDot::RL_a_serverAdapter_cnt_finalAdd()
{
  tUInt8 DEF_IF_a_serverAdapter_cnt_3_whas__3_THEN_a_server_ETC___d23;
  tUInt8 DEF_b__h875;
  tUInt8 DEF_b__h912;
  tUInt8 DEF_b__h848;
  DEF_b__h848 = INST_a_serverAdapter_cnt_3.METH_wget();
  DEF_b__h912 = INST_a_serverAdapter_cnt_2.METH_wget();
  DEF_b__h875 = INST_a_serverAdapter_cnt_1.METH_wget();
  DEF_b__h868 = INST_a_serverAdapter_cnt.METH_read();
  DEF_a_serverAdapter_cnt_3_whas____d13 = INST_a_serverAdapter_cnt_3.METH_whas();
  DEF_a_serverAdapter_cnt_2_whas____d11 = INST_a_serverAdapter_cnt_2.METH_whas();
  DEF_a_serverAdapter_cnt_1_whas____d10 = INST_a_serverAdapter_cnt_1.METH_whas();
  DEF_IF_a_serverAdapter_cnt_3_whas__3_THEN_a_server_ETC___d23 = DEF_a_serverAdapter_cnt_3_whas____d13 ? DEF_b__h848 : (tUInt8)7u & (((tUInt8)7u & (DEF_b__h868 + (DEF_a_serverAdapter_cnt_1_whas____d10 ? DEF_b__h875 : (tUInt8)0u))) + (DEF_a_serverAdapter_cnt_2_whas____d11 ? DEF_b__h912 : (tUInt8)0u));
  INST_a_serverAdapter_cnt.METH_write(DEF_IF_a_serverAdapter_cnt_3_whas__3_THEN_a_server_ETC___d23);
}

void MOD_mkVectorDot::RL_a_serverAdapter_s1__dreg_update()
{
  tUInt8 DEF_IF_a_serverAdapter_s1_1_whas__4_THEN_a_serverA_ETC___d27;
  DEF__0_CONCAT_DONTCARE___d26 = (tUInt8)0u;
  DEF_IF_a_serverAdapter_s1_1_whas__4_THEN_a_serverA_ETC___d27 = INST_a_serverAdapter_s1_1.METH_whas() ? INST_a_serverAdapter_s1_1.METH_wget() : DEF__0_CONCAT_DONTCARE___d26;
  INST_a_serverAdapter_s1.METH_write(DEF_IF_a_serverAdapter_s1_1_whas__4_THEN_a_serverA_ETC___d27);
}

void MOD_mkVectorDot::RL_a_serverAdapter_stageReadResponseAlways()
{
  tUInt8 DEF_NOT_a_serverAdapter_writeWithResp_wget__9_BIT__ETC___d33;
  tUInt8 DEF__1_CONCAT_NOT_a_serverAdapter_writeWithResp_wge_ETC___d34;
  tUInt8 DEF_a_serverAdapter_writeWithResp_wget____d29;
  DEF_a_serverAdapter_writeWithResp_wget____d29 = INST_a_serverAdapter_writeWithResp.METH_wget();
  DEF_NOT_a_serverAdapter_writeWithResp_wget__9_BIT__ETC___d33 = !((tUInt8)(DEF_a_serverAdapter_writeWithResp_wget____d29 >> 1u)) || (tUInt8)((tUInt8)1u & DEF_a_serverAdapter_writeWithResp_wget____d29);
  DEF__1_CONCAT_NOT_a_serverAdapter_writeWithResp_wge_ETC___d34 = (tUInt8)3u & (((tUInt8)1u << 1u) | DEF_NOT_a_serverAdapter_writeWithResp_wget__9_BIT__ETC___d33);
  INST_a_serverAdapter_s1_1.METH_wset(DEF__1_CONCAT_NOT_a_serverAdapter_writeWithResp_wge_ETC___d34);
  if (DEF_NOT_a_serverAdapter_writeWithResp_wget__9_BIT__ETC___d33)
    INST_a_serverAdapter_cnt_1.METH_wset((tUInt8)1u);
}

void MOD_mkVectorDot::RL_a_serverAdapter_moveToOutFIFO()
{
  tUInt32 DEF_v__h1443;
  DEF_v__h1443 = INST_a_memory.METH_read();
  DEF_a_serverAdapter_s1___d35 = INST_a_serverAdapter_s1.METH_read();
  DEF_a_serverAdapter_s1_5_BIT_0___d36 = (tUInt8)((tUInt8)1u & DEF_a_serverAdapter_s1___d35);
  if (DEF_a_serverAdapter_s1_5_BIT_0___d36)
    INST_a_serverAdapter_outData_enqw.METH_wset(DEF_v__h1443);
  if (DEF_a_serverAdapter_s1_5_BIT_0___d36)
    INST_a_serverAdapter_outData_beforeEnq.METH_write((tUInt8)1u);
}

void MOD_mkVectorDot::RL_a_serverAdapter_overRun()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_3);
}

void MOD_mkVectorDot::RL_b_serverAdapter_outData_enqueue()
{
  DEF_x_wget__h1850 = INST_b_serverAdapter_outData_enqw.METH_wget();
  DEF_x__h1948 = DEF_x_wget__h1850;
  INST_b_serverAdapter_outData_ff.METH_enq(DEF_x__h1948);
}

void MOD_mkVectorDot::RL_b_serverAdapter_outData_dequeue()
{
  INST_b_serverAdapter_outData_ff.METH_deq();
}

void MOD_mkVectorDot::RL_b_serverAdapter_cnt_finalAdd()
{
  tUInt8 DEF_IF_b_serverAdapter_cnt_3_whas__3_THEN_b_server_ETC___d73;
  tUInt8 DEF_b__h2348;
  tUInt8 DEF_b__h2385;
  tUInt8 DEF_b__h2321;
  DEF_b__h2321 = INST_b_serverAdapter_cnt_3.METH_wget();
  DEF_b__h2385 = INST_b_serverAdapter_cnt_2.METH_wget();
  DEF_b__h2348 = INST_b_serverAdapter_cnt_1.METH_wget();
  DEF_b__h2341 = INST_b_serverAdapter_cnt.METH_read();
  DEF_b_serverAdapter_cnt_3_whas____d63 = INST_b_serverAdapter_cnt_3.METH_whas();
  DEF_b_serverAdapter_cnt_2_whas____d61 = INST_b_serverAdapter_cnt_2.METH_whas();
  DEF_b_serverAdapter_cnt_1_whas____d60 = INST_b_serverAdapter_cnt_1.METH_whas();
  DEF_IF_b_serverAdapter_cnt_3_whas__3_THEN_b_server_ETC___d73 = DEF_b_serverAdapter_cnt_3_whas____d63 ? DEF_b__h2321 : (tUInt8)7u & (((tUInt8)7u & (DEF_b__h2341 + (DEF_b_serverAdapter_cnt_1_whas____d60 ? DEF_b__h2348 : (tUInt8)0u))) + (DEF_b_serverAdapter_cnt_2_whas____d61 ? DEF_b__h2385 : (tUInt8)0u));
  INST_b_serverAdapter_cnt.METH_write(DEF_IF_b_serverAdapter_cnt_3_whas__3_THEN_b_server_ETC___d73);
}

void MOD_mkVectorDot::RL_b_serverAdapter_s1__dreg_update()
{
  tUInt8 DEF_IF_b_serverAdapter_s1_1_whas__4_THEN_b_serverA_ETC___d76;
  DEF__0_CONCAT_DONTCARE___d26 = (tUInt8)0u;
  DEF_IF_b_serverAdapter_s1_1_whas__4_THEN_b_serverA_ETC___d76 = INST_b_serverAdapter_s1_1.METH_whas() ? INST_b_serverAdapter_s1_1.METH_wget() : DEF__0_CONCAT_DONTCARE___d26;
  INST_b_serverAdapter_s1.METH_write(DEF_IF_b_serverAdapter_s1_1_whas__4_THEN_b_serverA_ETC___d76);
}

void MOD_mkVectorDot::RL_b_serverAdapter_stageReadResponseAlways()
{
  tUInt8 DEF_NOT_b_serverAdapter_writeWithResp_wget__8_BIT__ETC___d82;
  tUInt8 DEF__1_CONCAT_NOT_b_serverAdapter_writeWithResp_wge_ETC___d83;
  tUInt8 DEF_b_serverAdapter_writeWithResp_wget____d78;
  DEF_b_serverAdapter_writeWithResp_wget____d78 = INST_b_serverAdapter_writeWithResp.METH_wget();
  DEF_NOT_b_serverAdapter_writeWithResp_wget__8_BIT__ETC___d82 = !((tUInt8)(DEF_b_serverAdapter_writeWithResp_wget____d78 >> 1u)) || (tUInt8)((tUInt8)1u & DEF_b_serverAdapter_writeWithResp_wget____d78);
  DEF__1_CONCAT_NOT_b_serverAdapter_writeWithResp_wge_ETC___d83 = (tUInt8)3u & (((tUInt8)1u << 1u) | DEF_NOT_b_serverAdapter_writeWithResp_wget__8_BIT__ETC___d82);
  INST_b_serverAdapter_s1_1.METH_wset(DEF__1_CONCAT_NOT_b_serverAdapter_writeWithResp_wge_ETC___d83);
  if (DEF_NOT_b_serverAdapter_writeWithResp_wget__8_BIT__ETC___d82)
    INST_b_serverAdapter_cnt_1.METH_wset((tUInt8)1u);
}

void MOD_mkVectorDot::RL_b_serverAdapter_moveToOutFIFO()
{
  tUInt32 DEF_v__h2911;
  DEF_v__h2911 = INST_b_memory.METH_read();
  DEF_b_serverAdapter_s1___d84 = INST_b_serverAdapter_s1.METH_read();
  DEF_b_serverAdapter_s1_4_BIT_0___d85 = (tUInt8)((tUInt8)1u & DEF_b_serverAdapter_s1___d84);
  if (DEF_b_serverAdapter_s1_4_BIT_0___d85)
    INST_b_serverAdapter_outData_enqw.METH_wset(DEF_v__h2911);
  if (DEF_b_serverAdapter_s1_4_BIT_0___d85)
    INST_b_serverAdapter_outData_beforeEnq.METH_write((tUInt8)1u);
}

void MOD_mkVectorDot::RL_b_serverAdapter_overRun()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_3);
}

void MOD_mkVectorDot::RL_process_a()
{
  tUInt8 DEF_x__h3527;
  tUInt8 DEF_pos_a_09_ULT_dim_10_MUL_0_CONCAT_i_11_12_13_BI_ETC___d117;
  tUInt8 DEF_NOT_pos_a_09_ULT_dim_10_MUL_0_CONCAT_i_11_12_1_ETC___d119;
  tUInt8 DEF_x__h3546;
  DEF_x__h3546 = INST_pos_a.METH_read();
  DEF_x__h4082 = INST_dim.METH_read();
  DEF_x__h3694 = INST_i.METH_read();
  DEF_y__h3693 = (tUInt8)255u & DEF_x__h3694;
  DEF_x__h3690 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h4082)) * ((tUInt32)(DEF_y__h3693)))));
  DEF_x__h3688 = (tUInt8)255u & (DEF_x__h3690 + DEF_x__h4082);
  DEF_y__h3687 = (tUInt8)255u & (DEF_x__h3688 - (tUInt8)1u);
  DEF_pos_a_09_ULT_dim_10_MUL_0_CONCAT_i_11_12_13_BI_ETC___d117 = DEF_x__h3546 < DEF_y__h3687;
  DEF_NOT_pos_a_09_ULT_dim_10_MUL_0_CONCAT_i_11_12_1_ETC___d119 = !DEF_pos_a_09_ULT_dim_10_MUL_0_CONCAT_i_11_12_13_BI_ETC___d117;
  DEF_x__h3527 = (tUInt8)255u & (DEF_x__h3546 + (tUInt8)1u);
  INST_a_memory.METH_put((tUInt8)0u, DEF_x__h3546, 2863311530u);
  INST_a_serverAdapter_writeWithResp.METH_wset((tUInt8)0u);
  if (DEF_pos_a_09_ULT_dim_10_MUL_0_CONCAT_i_11_12_13_BI_ETC___d117)
    INST_pos_a.METH_write(DEF_x__h3527);
  INST_req_a_ready.METH_write((tUInt8)1u);
  if (DEF_NOT_pos_a_09_ULT_dim_10_MUL_0_CONCAT_i_11_12_1_ETC___d119)
    INST_done_a.METH_write((tUInt8)1u);
}

void MOD_mkVectorDot::RL_process_b()
{
  tUInt8 DEF_x__h3715;
  tUInt8 DEF_pos_b_28_ULT_dim_10_MUL_0_CONCAT_i_11_12_13_BI_ETC___d129;
  tUInt8 DEF_NOT_pos_b_28_ULT_dim_10_MUL_0_CONCAT_i_11_12_1_ETC___d131;
  tUInt8 DEF_x__h3734;
  DEF_x__h3734 = INST_pos_b.METH_read();
  DEF_x__h4082 = INST_dim.METH_read();
  DEF_x__h3694 = INST_i.METH_read();
  DEF_y__h3693 = (tUInt8)255u & DEF_x__h3694;
  DEF_x__h3690 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h4082)) * ((tUInt32)(DEF_y__h3693)))));
  DEF_x__h3688 = (tUInt8)255u & (DEF_x__h3690 + DEF_x__h4082);
  DEF_y__h3687 = (tUInt8)255u & (DEF_x__h3688 - (tUInt8)1u);
  DEF_pos_b_28_ULT_dim_10_MUL_0_CONCAT_i_11_12_13_BI_ETC___d129 = DEF_x__h3734 < DEF_y__h3687;
  DEF_NOT_pos_b_28_ULT_dim_10_MUL_0_CONCAT_i_11_12_1_ETC___d131 = !DEF_pos_b_28_ULT_dim_10_MUL_0_CONCAT_i_11_12_13_BI_ETC___d129;
  DEF_x__h3715 = (tUInt8)255u & (DEF_x__h3734 + (tUInt8)1u);
  INST_b_memory.METH_put((tUInt8)0u, DEF_x__h3734, 2863311530u);
  INST_b_serverAdapter_writeWithResp.METH_wset((tUInt8)0u);
  if (DEF_pos_b_28_ULT_dim_10_MUL_0_CONCAT_i_11_12_13_BI_ETC___d129)
    INST_pos_b.METH_write(DEF_x__h3715);
  INST_req_b_ready.METH_write((tUInt8)1u);
  if (DEF_NOT_pos_b_28_ULT_dim_10_MUL_0_CONCAT_i_11_12_1_ETC___d131)
    INST_done_b.METH_write((tUInt8)1u);
}

void MOD_mkVectorDot::RL_mult_inputs()
{
  tUInt8 DEF_x__h4047;
  tUInt32 DEF_x__h3996;
  tUInt8 DEF_pos_out_50_EQ_dim_10_MINUS_1_52___d153;
  tUInt32 DEF_v__h3788;
  tUInt32 DEF_v__h3888;
  tUInt32 DEF_y__h4031;
  tUInt8 DEF_x__h4066;
  tUInt32 DEF_x_first__h259;
  tUInt32 DEF_x_first__h1735;
  DEF_x_wget__h1850 = INST_b_serverAdapter_outData_enqw.METH_wget();
  DEF_x_first__h1735 = INST_b_serverAdapter_outData_ff.METH_first();
  DEF_x_wget__h374 = INST_a_serverAdapter_outData_enqw.METH_wget();
  DEF_x_first__h259 = INST_a_serverAdapter_outData_ff.METH_first();
  DEF_x__h4030 = INST_output_res.METH_read();
  DEF_x__h4066 = INST_pos_out.METH_read();
  DEF_x__h4082 = INST_dim.METH_read();
  DEF_b_serverAdapter_outData_ff_i_notEmpty____d54 = INST_b_serverAdapter_outData_ff.METH_i_notEmpty();
  DEF_a_serverAdapter_outData_ff_i_notEmpty____d4 = INST_a_serverAdapter_outData_ff.METH_i_notEmpty();
  DEF_x__h1948 = DEF_x_wget__h1850;
  DEF_v__h3888 = DEF_b_serverAdapter_outData_ff_i_notEmpty____d54 ? DEF_x_first__h1735 : DEF_x__h1948;
  DEF_x__h472 = DEF_x_wget__h374;
  DEF_v__h3788 = DEF_a_serverAdapter_outData_ff_i_notEmpty____d4 ? DEF_x_first__h259 : DEF_x__h472;
  DEF_y__h4031 = (tUInt32)(((tUInt64)(DEF_v__h3788)) * ((tUInt64)(DEF_v__h3888)));
  DEF_pos_out_50_EQ_dim_10_MINUS_1_52___d153 = DEF_x__h4066 == ((tUInt8)255u & (DEF_x__h4082 - (tUInt8)1u));
  DEF_x__h3996 = DEF_x__h4030 + DEF_y__h4031;
  DEF_x__h4047 = (tUInt8)255u & (DEF_x__h4066 + (tUInt8)1u);
  INST_a_serverAdapter_outData_dequeueing.METH_wset();
  INST_a_serverAdapter_outData_beforeDeq.METH_write((tUInt8)1u);
  INST_a_serverAdapter_cnt_2.METH_wset((tUInt8)7u);
  INST_b_serverAdapter_outData_beforeDeq.METH_write((tUInt8)1u);
  INST_b_serverAdapter_outData_dequeueing.METH_wset();
  INST_b_serverAdapter_cnt_2.METH_wset((tUInt8)7u);
  INST_output_res.METH_write(DEF_x__h3996);
  INST_pos_out.METH_write(DEF_x__h4047);
  if (DEF_pos_out_50_EQ_dim_10_MINUS_1_52___d153)
    INST_done_all.METH_write((tUInt8)1u);
  if (DEF_pos_out_50_EQ_dim_10_MINUS_1_52___d153)
    INST_ready_start.METH_write((tUInt8)0u);
  INST_req_b_ready.METH_write((tUInt8)0u);
  INST_req_a_ready.METH_write((tUInt8)0u);
}


/* Methods */

void MOD_mkVectorDot::METH_start(tUInt8 ARG_start_dim_in, tUInt8 ARG_start_i)
{
  tUInt8 DEF_y__h4414;
  tUInt8 DEF_x__h4395;
  PORT_EN_start = (tUInt8)1u;
  DEF_WILL_FIRE_start = (tUInt8)1u;
  DEF_y__h4414 = (tUInt8)255u & ARG_start_i;
  DEF_x__h4395 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(ARG_start_dim_in)) * ((tUInt32)(DEF_y__h4414)))));
  INST_ready_start.METH_write((tUInt8)1u);
  INST_dim.METH_write(ARG_start_dim_in);
  INST_done_all.METH_write((tUInt8)0u);
  INST_pos_a.METH_write(DEF_x__h4395);
  INST_pos_b.METH_write(DEF_x__h4395);
  INST_done_a.METH_write((tUInt8)0u);
  INST_done_b.METH_write((tUInt8)0u);
  INST_pos_out.METH_write((tUInt8)0u);
  INST_output_res.METH_write(0u);
  INST_i.METH_write(ARG_start_i);
}

tUInt8 MOD_mkVectorDot::METH_RDY_start()
{
  tUInt8 DEF_CAN_FIRE_start;
  tUInt8 PORT_RDY_start;
  DEF_ready_start__h3375 = INST_ready_start.METH_read();
  DEF_CAN_FIRE_start = !DEF_ready_start__h3375;
  PORT_RDY_start = DEF_CAN_FIRE_start;
  return PORT_RDY_start;
}

tUInt32 MOD_mkVectorDot::METH_response()
{
  tUInt32 PORT_response;
  DEF_x__h4030 = INST_output_res.METH_read();
  PORT_response = DEF_x__h4030;
  return PORT_response;
}

tUInt8 MOD_mkVectorDot::METH_RDY_response()
{
  tUInt8 DEF_CAN_FIRE_response;
  tUInt8 PORT_RDY_response;
  DEF_done_all__h3781 = INST_done_all.METH_read();
  DEF_CAN_FIRE_response = DEF_done_all__h3781;
  PORT_RDY_response = DEF_CAN_FIRE_response;
  return PORT_RDY_response;
}


/* Reset routines */

void MOD_mkVectorDot::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_req_b_ready.reset_RST(ARG_rst_in);
  INST_req_a_ready.reset_RST(ARG_rst_in);
  INST_ready_start.reset_RST(ARG_rst_in);
  INST_pos_out.reset_RST(ARG_rst_in);
  INST_pos_b.reset_RST(ARG_rst_in);
  INST_pos_a.reset_RST(ARG_rst_in);
  INST_output_res.reset_RST(ARG_rst_in);
  INST_i.reset_RST(ARG_rst_in);
  INST_done_b.reset_RST(ARG_rst_in);
  INST_done_all.reset_RST(ARG_rst_in);
  INST_done_a.reset_RST(ARG_rst_in);
  INST_dim.reset_RST(ARG_rst_in);
  INST_b_serverAdapter_s1.reset_RST(ARG_rst_in);
  INST_b_serverAdapter_outData_ff.reset_RST(ARG_rst_in);
  INST_b_serverAdapter_cnt.reset_RST(ARG_rst_in);
  INST_a_serverAdapter_s1.reset_RST(ARG_rst_in);
  INST_a_serverAdapter_outData_ff.reset_RST(ARG_rst_in);
  INST_a_serverAdapter_cnt.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkVectorDot::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkVectorDot::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_a_memory.dump_state(indent + 2u);
  INST_a_serverAdapter_cnt.dump_state(indent + 2u);
  INST_a_serverAdapter_cnt_1.dump_state(indent + 2u);
  INST_a_serverAdapter_cnt_2.dump_state(indent + 2u);
  INST_a_serverAdapter_cnt_3.dump_state(indent + 2u);
  INST_a_serverAdapter_outData_beforeDeq.dump_state(indent + 2u);
  INST_a_serverAdapter_outData_beforeEnq.dump_state(indent + 2u);
  INST_a_serverAdapter_outData_dequeueing.dump_state(indent + 2u);
  INST_a_serverAdapter_outData_enqw.dump_state(indent + 2u);
  INST_a_serverAdapter_outData_ff.dump_state(indent + 2u);
  INST_a_serverAdapter_s1.dump_state(indent + 2u);
  INST_a_serverAdapter_s1_1.dump_state(indent + 2u);
  INST_a_serverAdapter_writeWithResp.dump_state(indent + 2u);
  INST_b_memory.dump_state(indent + 2u);
  INST_b_serverAdapter_cnt.dump_state(indent + 2u);
  INST_b_serverAdapter_cnt_1.dump_state(indent + 2u);
  INST_b_serverAdapter_cnt_2.dump_state(indent + 2u);
  INST_b_serverAdapter_cnt_3.dump_state(indent + 2u);
  INST_b_serverAdapter_outData_beforeDeq.dump_state(indent + 2u);
  INST_b_serverAdapter_outData_beforeEnq.dump_state(indent + 2u);
  INST_b_serverAdapter_outData_dequeueing.dump_state(indent + 2u);
  INST_b_serverAdapter_outData_enqw.dump_state(indent + 2u);
  INST_b_serverAdapter_outData_ff.dump_state(indent + 2u);
  INST_b_serverAdapter_s1.dump_state(indent + 2u);
  INST_b_serverAdapter_s1_1.dump_state(indent + 2u);
  INST_b_serverAdapter_writeWithResp.dump_state(indent + 2u);
  INST_dim.dump_state(indent + 2u);
  INST_done_a.dump_state(indent + 2u);
  INST_done_all.dump_state(indent + 2u);
  INST_done_b.dump_state(indent + 2u);
  INST_i.dump_state(indent + 2u);
  INST_output_res.dump_state(indent + 2u);
  INST_pos_a.dump_state(indent + 2u);
  INST_pos_b.dump_state(indent + 2u);
  INST_pos_out.dump_state(indent + 2u);
  INST_ready_start.dump_state(indent + 2u);
  INST_req_a_ready.dump_state(indent + 2u);
  INST_req_b_ready.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkVectorDot::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 69u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_start", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_0_CONCAT_DONTCARE___d26", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a_serverAdapter_cnt_1_whas____d10", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a_serverAdapter_cnt_2_whas____d11", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a_serverAdapter_cnt_3_whas____d13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a_serverAdapter_outData_ff_i_notEmpty____d4", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a_serverAdapter_s1_5_BIT_0___d36", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "a_serverAdapter_s1___d35", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h2341", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h868", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b_serverAdapter_cnt_1_whas____d60", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b_serverAdapter_cnt_2_whas____d61", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b_serverAdapter_cnt_3_whas____d63", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b_serverAdapter_outData_ff_i_notEmpty____d54", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b_serverAdapter_s1_4_BIT_0___d85", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b_serverAdapter_s1___d84", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "done_all__h3781", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "ready_start__h3375", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1948", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h3688", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h3690", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h3694", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h4030", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h4082", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h472", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h1850", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h374", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h3687", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "y__h3693", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "EN_start", 1u);
  num = INST_a_memory.dump_VCD_defs(num);
  num = INST_a_serverAdapter_cnt.dump_VCD_defs(num);
  num = INST_a_serverAdapter_cnt_1.dump_VCD_defs(num);
  num = INST_a_serverAdapter_cnt_2.dump_VCD_defs(num);
  num = INST_a_serverAdapter_cnt_3.dump_VCD_defs(num);
  num = INST_a_serverAdapter_outData_beforeDeq.dump_VCD_defs(num);
  num = INST_a_serverAdapter_outData_beforeEnq.dump_VCD_defs(num);
  num = INST_a_serverAdapter_outData_dequeueing.dump_VCD_defs(num);
  num = INST_a_serverAdapter_outData_enqw.dump_VCD_defs(num);
  num = INST_a_serverAdapter_outData_ff.dump_VCD_defs(num);
  num = INST_a_serverAdapter_s1.dump_VCD_defs(num);
  num = INST_a_serverAdapter_s1_1.dump_VCD_defs(num);
  num = INST_a_serverAdapter_writeWithResp.dump_VCD_defs(num);
  num = INST_b_memory.dump_VCD_defs(num);
  num = INST_b_serverAdapter_cnt.dump_VCD_defs(num);
  num = INST_b_serverAdapter_cnt_1.dump_VCD_defs(num);
  num = INST_b_serverAdapter_cnt_2.dump_VCD_defs(num);
  num = INST_b_serverAdapter_cnt_3.dump_VCD_defs(num);
  num = INST_b_serverAdapter_outData_beforeDeq.dump_VCD_defs(num);
  num = INST_b_serverAdapter_outData_beforeEnq.dump_VCD_defs(num);
  num = INST_b_serverAdapter_outData_dequeueing.dump_VCD_defs(num);
  num = INST_b_serverAdapter_outData_enqw.dump_VCD_defs(num);
  num = INST_b_serverAdapter_outData_ff.dump_VCD_defs(num);
  num = INST_b_serverAdapter_s1.dump_VCD_defs(num);
  num = INST_b_serverAdapter_s1_1.dump_VCD_defs(num);
  num = INST_b_serverAdapter_writeWithResp.dump_VCD_defs(num);
  num = INST_dim.dump_VCD_defs(num);
  num = INST_done_a.dump_VCD_defs(num);
  num = INST_done_all.dump_VCD_defs(num);
  num = INST_done_b.dump_VCD_defs(num);
  num = INST_i.dump_VCD_defs(num);
  num = INST_output_res.dump_VCD_defs(num);
  num = INST_pos_a.dump_VCD_defs(num);
  num = INST_pos_b.dump_VCD_defs(num);
  num = INST_pos_out.dump_VCD_defs(num);
  num = INST_ready_start.dump_VCD_defs(num);
  num = INST_req_a_ready.dump_VCD_defs(num);
  num = INST_req_b_ready.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkVectorDot::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkVectorDot &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkVectorDot::vcd_defs(tVCDDumpType dt, MOD_mkVectorDot &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_start) != DEF_WILL_FIRE_start)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_start, 1u);
	backing.DEF_WILL_FIRE_start = DEF_WILL_FIRE_start;
      }
      ++num;
      if ((backing.DEF__0_CONCAT_DONTCARE___d26) != DEF__0_CONCAT_DONTCARE___d26)
      {
	vcd_write_val(sim_hdl, num, DEF__0_CONCAT_DONTCARE___d26, 2u);
	backing.DEF__0_CONCAT_DONTCARE___d26 = DEF__0_CONCAT_DONTCARE___d26;
      }
      ++num;
      if ((backing.DEF_a_serverAdapter_cnt_1_whas____d10) != DEF_a_serverAdapter_cnt_1_whas____d10)
      {
	vcd_write_val(sim_hdl, num, DEF_a_serverAdapter_cnt_1_whas____d10, 1u);
	backing.DEF_a_serverAdapter_cnt_1_whas____d10 = DEF_a_serverAdapter_cnt_1_whas____d10;
      }
      ++num;
      if ((backing.DEF_a_serverAdapter_cnt_2_whas____d11) != DEF_a_serverAdapter_cnt_2_whas____d11)
      {
	vcd_write_val(sim_hdl, num, DEF_a_serverAdapter_cnt_2_whas____d11, 1u);
	backing.DEF_a_serverAdapter_cnt_2_whas____d11 = DEF_a_serverAdapter_cnt_2_whas____d11;
      }
      ++num;
      if ((backing.DEF_a_serverAdapter_cnt_3_whas____d13) != DEF_a_serverAdapter_cnt_3_whas____d13)
      {
	vcd_write_val(sim_hdl, num, DEF_a_serverAdapter_cnt_3_whas____d13, 1u);
	backing.DEF_a_serverAdapter_cnt_3_whas____d13 = DEF_a_serverAdapter_cnt_3_whas____d13;
      }
      ++num;
      if ((backing.DEF_a_serverAdapter_outData_ff_i_notEmpty____d4) != DEF_a_serverAdapter_outData_ff_i_notEmpty____d4)
      {
	vcd_write_val(sim_hdl, num, DEF_a_serverAdapter_outData_ff_i_notEmpty____d4, 1u);
	backing.DEF_a_serverAdapter_outData_ff_i_notEmpty____d4 = DEF_a_serverAdapter_outData_ff_i_notEmpty____d4;
      }
      ++num;
      if ((backing.DEF_a_serverAdapter_s1_5_BIT_0___d36) != DEF_a_serverAdapter_s1_5_BIT_0___d36)
      {
	vcd_write_val(sim_hdl, num, DEF_a_serverAdapter_s1_5_BIT_0___d36, 1u);
	backing.DEF_a_serverAdapter_s1_5_BIT_0___d36 = DEF_a_serverAdapter_s1_5_BIT_0___d36;
      }
      ++num;
      if ((backing.DEF_a_serverAdapter_s1___d35) != DEF_a_serverAdapter_s1___d35)
      {
	vcd_write_val(sim_hdl, num, DEF_a_serverAdapter_s1___d35, 2u);
	backing.DEF_a_serverAdapter_s1___d35 = DEF_a_serverAdapter_s1___d35;
      }
      ++num;
      if ((backing.DEF_b__h2341) != DEF_b__h2341)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h2341, 3u);
	backing.DEF_b__h2341 = DEF_b__h2341;
      }
      ++num;
      if ((backing.DEF_b__h868) != DEF_b__h868)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h868, 3u);
	backing.DEF_b__h868 = DEF_b__h868;
      }
      ++num;
      if ((backing.DEF_b_serverAdapter_cnt_1_whas____d60) != DEF_b_serverAdapter_cnt_1_whas____d60)
      {
	vcd_write_val(sim_hdl, num, DEF_b_serverAdapter_cnt_1_whas____d60, 1u);
	backing.DEF_b_serverAdapter_cnt_1_whas____d60 = DEF_b_serverAdapter_cnt_1_whas____d60;
      }
      ++num;
      if ((backing.DEF_b_serverAdapter_cnt_2_whas____d61) != DEF_b_serverAdapter_cnt_2_whas____d61)
      {
	vcd_write_val(sim_hdl, num, DEF_b_serverAdapter_cnt_2_whas____d61, 1u);
	backing.DEF_b_serverAdapter_cnt_2_whas____d61 = DEF_b_serverAdapter_cnt_2_whas____d61;
      }
      ++num;
      if ((backing.DEF_b_serverAdapter_cnt_3_whas____d63) != DEF_b_serverAdapter_cnt_3_whas____d63)
      {
	vcd_write_val(sim_hdl, num, DEF_b_serverAdapter_cnt_3_whas____d63, 1u);
	backing.DEF_b_serverAdapter_cnt_3_whas____d63 = DEF_b_serverAdapter_cnt_3_whas____d63;
      }
      ++num;
      if ((backing.DEF_b_serverAdapter_outData_ff_i_notEmpty____d54) != DEF_b_serverAdapter_outData_ff_i_notEmpty____d54)
      {
	vcd_write_val(sim_hdl, num, DEF_b_serverAdapter_outData_ff_i_notEmpty____d54, 1u);
	backing.DEF_b_serverAdapter_outData_ff_i_notEmpty____d54 = DEF_b_serverAdapter_outData_ff_i_notEmpty____d54;
      }
      ++num;
      if ((backing.DEF_b_serverAdapter_s1_4_BIT_0___d85) != DEF_b_serverAdapter_s1_4_BIT_0___d85)
      {
	vcd_write_val(sim_hdl, num, DEF_b_serverAdapter_s1_4_BIT_0___d85, 1u);
	backing.DEF_b_serverAdapter_s1_4_BIT_0___d85 = DEF_b_serverAdapter_s1_4_BIT_0___d85;
      }
      ++num;
      if ((backing.DEF_b_serverAdapter_s1___d84) != DEF_b_serverAdapter_s1___d84)
      {
	vcd_write_val(sim_hdl, num, DEF_b_serverAdapter_s1___d84, 2u);
	backing.DEF_b_serverAdapter_s1___d84 = DEF_b_serverAdapter_s1___d84;
      }
      ++num;
      if ((backing.DEF_done_all__h3781) != DEF_done_all__h3781)
      {
	vcd_write_val(sim_hdl, num, DEF_done_all__h3781, 1u);
	backing.DEF_done_all__h3781 = DEF_done_all__h3781;
      }
      ++num;
      if ((backing.DEF_ready_start__h3375) != DEF_ready_start__h3375)
      {
	vcd_write_val(sim_hdl, num, DEF_ready_start__h3375, 1u);
	backing.DEF_ready_start__h3375 = DEF_ready_start__h3375;
      }
      ++num;
      if ((backing.DEF_x__h1948) != DEF_x__h1948)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1948, 32u);
	backing.DEF_x__h1948 = DEF_x__h1948;
      }
      ++num;
      if ((backing.DEF_x__h3688) != DEF_x__h3688)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h3688, 8u);
	backing.DEF_x__h3688 = DEF_x__h3688;
      }
      ++num;
      if ((backing.DEF_x__h3690) != DEF_x__h3690)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h3690, 8u);
	backing.DEF_x__h3690 = DEF_x__h3690;
      }
      ++num;
      if ((backing.DEF_x__h3694) != DEF_x__h3694)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h3694, 2u);
	backing.DEF_x__h3694 = DEF_x__h3694;
      }
      ++num;
      if ((backing.DEF_x__h4030) != DEF_x__h4030)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h4030, 32u);
	backing.DEF_x__h4030 = DEF_x__h4030;
      }
      ++num;
      if ((backing.DEF_x__h4082) != DEF_x__h4082)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h4082, 8u);
	backing.DEF_x__h4082 = DEF_x__h4082;
      }
      ++num;
      if ((backing.DEF_x__h472) != DEF_x__h472)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h472, 32u);
	backing.DEF_x__h472 = DEF_x__h472;
      }
      ++num;
      if ((backing.DEF_x_wget__h1850) != DEF_x_wget__h1850)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h1850, 32u);
	backing.DEF_x_wget__h1850 = DEF_x_wget__h1850;
      }
      ++num;
      if ((backing.DEF_x_wget__h374) != DEF_x_wget__h374)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h374, 32u);
	backing.DEF_x_wget__h374 = DEF_x_wget__h374;
      }
      ++num;
      if ((backing.DEF_y__h3687) != DEF_y__h3687)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h3687, 8u);
	backing.DEF_y__h3687 = DEF_y__h3687;
      }
      ++num;
      if ((backing.DEF_y__h3693) != DEF_y__h3693)
      {
	vcd_write_val(sim_hdl, num, DEF_y__h3693, 8u);
	backing.DEF_y__h3693 = DEF_y__h3693;
      }
      ++num;
      if ((backing.PORT_EN_start) != PORT_EN_start)
      {
	vcd_write_val(sim_hdl, num, PORT_EN_start, 1u);
	backing.PORT_EN_start = PORT_EN_start;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_start, 1u);
      backing.DEF_WILL_FIRE_start = DEF_WILL_FIRE_start;
      vcd_write_val(sim_hdl, num++, DEF__0_CONCAT_DONTCARE___d26, 2u);
      backing.DEF__0_CONCAT_DONTCARE___d26 = DEF__0_CONCAT_DONTCARE___d26;
      vcd_write_val(sim_hdl, num++, DEF_a_serverAdapter_cnt_1_whas____d10, 1u);
      backing.DEF_a_serverAdapter_cnt_1_whas____d10 = DEF_a_serverAdapter_cnt_1_whas____d10;
      vcd_write_val(sim_hdl, num++, DEF_a_serverAdapter_cnt_2_whas____d11, 1u);
      backing.DEF_a_serverAdapter_cnt_2_whas____d11 = DEF_a_serverAdapter_cnt_2_whas____d11;
      vcd_write_val(sim_hdl, num++, DEF_a_serverAdapter_cnt_3_whas____d13, 1u);
      backing.DEF_a_serverAdapter_cnt_3_whas____d13 = DEF_a_serverAdapter_cnt_3_whas____d13;
      vcd_write_val(sim_hdl, num++, DEF_a_serverAdapter_outData_ff_i_notEmpty____d4, 1u);
      backing.DEF_a_serverAdapter_outData_ff_i_notEmpty____d4 = DEF_a_serverAdapter_outData_ff_i_notEmpty____d4;
      vcd_write_val(sim_hdl, num++, DEF_a_serverAdapter_s1_5_BIT_0___d36, 1u);
      backing.DEF_a_serverAdapter_s1_5_BIT_0___d36 = DEF_a_serverAdapter_s1_5_BIT_0___d36;
      vcd_write_val(sim_hdl, num++, DEF_a_serverAdapter_s1___d35, 2u);
      backing.DEF_a_serverAdapter_s1___d35 = DEF_a_serverAdapter_s1___d35;
      vcd_write_val(sim_hdl, num++, DEF_b__h2341, 3u);
      backing.DEF_b__h2341 = DEF_b__h2341;
      vcd_write_val(sim_hdl, num++, DEF_b__h868, 3u);
      backing.DEF_b__h868 = DEF_b__h868;
      vcd_write_val(sim_hdl, num++, DEF_b_serverAdapter_cnt_1_whas____d60, 1u);
      backing.DEF_b_serverAdapter_cnt_1_whas____d60 = DEF_b_serverAdapter_cnt_1_whas____d60;
      vcd_write_val(sim_hdl, num++, DEF_b_serverAdapter_cnt_2_whas____d61, 1u);
      backing.DEF_b_serverAdapter_cnt_2_whas____d61 = DEF_b_serverAdapter_cnt_2_whas____d61;
      vcd_write_val(sim_hdl, num++, DEF_b_serverAdapter_cnt_3_whas____d63, 1u);
      backing.DEF_b_serverAdapter_cnt_3_whas____d63 = DEF_b_serverAdapter_cnt_3_whas____d63;
      vcd_write_val(sim_hdl, num++, DEF_b_serverAdapter_outData_ff_i_notEmpty____d54, 1u);
      backing.DEF_b_serverAdapter_outData_ff_i_notEmpty____d54 = DEF_b_serverAdapter_outData_ff_i_notEmpty____d54;
      vcd_write_val(sim_hdl, num++, DEF_b_serverAdapter_s1_4_BIT_0___d85, 1u);
      backing.DEF_b_serverAdapter_s1_4_BIT_0___d85 = DEF_b_serverAdapter_s1_4_BIT_0___d85;
      vcd_write_val(sim_hdl, num++, DEF_b_serverAdapter_s1___d84, 2u);
      backing.DEF_b_serverAdapter_s1___d84 = DEF_b_serverAdapter_s1___d84;
      vcd_write_val(sim_hdl, num++, DEF_done_all__h3781, 1u);
      backing.DEF_done_all__h3781 = DEF_done_all__h3781;
      vcd_write_val(sim_hdl, num++, DEF_ready_start__h3375, 1u);
      backing.DEF_ready_start__h3375 = DEF_ready_start__h3375;
      vcd_write_val(sim_hdl, num++, DEF_x__h1948, 32u);
      backing.DEF_x__h1948 = DEF_x__h1948;
      vcd_write_val(sim_hdl, num++, DEF_x__h3688, 8u);
      backing.DEF_x__h3688 = DEF_x__h3688;
      vcd_write_val(sim_hdl, num++, DEF_x__h3690, 8u);
      backing.DEF_x__h3690 = DEF_x__h3690;
      vcd_write_val(sim_hdl, num++, DEF_x__h3694, 2u);
      backing.DEF_x__h3694 = DEF_x__h3694;
      vcd_write_val(sim_hdl, num++, DEF_x__h4030, 32u);
      backing.DEF_x__h4030 = DEF_x__h4030;
      vcd_write_val(sim_hdl, num++, DEF_x__h4082, 8u);
      backing.DEF_x__h4082 = DEF_x__h4082;
      vcd_write_val(sim_hdl, num++, DEF_x__h472, 32u);
      backing.DEF_x__h472 = DEF_x__h472;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h1850, 32u);
      backing.DEF_x_wget__h1850 = DEF_x_wget__h1850;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h374, 32u);
      backing.DEF_x_wget__h374 = DEF_x_wget__h374;
      vcd_write_val(sim_hdl, num++, DEF_y__h3687, 8u);
      backing.DEF_y__h3687 = DEF_y__h3687;
      vcd_write_val(sim_hdl, num++, DEF_y__h3693, 8u);
      backing.DEF_y__h3693 = DEF_y__h3693;
      vcd_write_val(sim_hdl, num++, PORT_EN_start, 1u);
      backing.PORT_EN_start = PORT_EN_start;
    }
}

void MOD_mkVectorDot::vcd_prims(tVCDDumpType dt, MOD_mkVectorDot &backing)
{
  INST_a_memory.dump_VCD(dt, backing.INST_a_memory);
  INST_a_serverAdapter_cnt.dump_VCD(dt, backing.INST_a_serverAdapter_cnt);
  INST_a_serverAdapter_cnt_1.dump_VCD(dt, backing.INST_a_serverAdapter_cnt_1);
  INST_a_serverAdapter_cnt_2.dump_VCD(dt, backing.INST_a_serverAdapter_cnt_2);
  INST_a_serverAdapter_cnt_3.dump_VCD(dt, backing.INST_a_serverAdapter_cnt_3);
  INST_a_serverAdapter_outData_beforeDeq.dump_VCD(dt, backing.INST_a_serverAdapter_outData_beforeDeq);
  INST_a_serverAdapter_outData_beforeEnq.dump_VCD(dt, backing.INST_a_serverAdapter_outData_beforeEnq);
  INST_a_serverAdapter_outData_dequeueing.dump_VCD(dt,
						   backing.INST_a_serverAdapter_outData_dequeueing);
  INST_a_serverAdapter_outData_enqw.dump_VCD(dt, backing.INST_a_serverAdapter_outData_enqw);
  INST_a_serverAdapter_outData_ff.dump_VCD(dt, backing.INST_a_serverAdapter_outData_ff);
  INST_a_serverAdapter_s1.dump_VCD(dt, backing.INST_a_serverAdapter_s1);
  INST_a_serverAdapter_s1_1.dump_VCD(dt, backing.INST_a_serverAdapter_s1_1);
  INST_a_serverAdapter_writeWithResp.dump_VCD(dt, backing.INST_a_serverAdapter_writeWithResp);
  INST_b_memory.dump_VCD(dt, backing.INST_b_memory);
  INST_b_serverAdapter_cnt.dump_VCD(dt, backing.INST_b_serverAdapter_cnt);
  INST_b_serverAdapter_cnt_1.dump_VCD(dt, backing.INST_b_serverAdapter_cnt_1);
  INST_b_serverAdapter_cnt_2.dump_VCD(dt, backing.INST_b_serverAdapter_cnt_2);
  INST_b_serverAdapter_cnt_3.dump_VCD(dt, backing.INST_b_serverAdapter_cnt_3);
  INST_b_serverAdapter_outData_beforeDeq.dump_VCD(dt, backing.INST_b_serverAdapter_outData_beforeDeq);
  INST_b_serverAdapter_outData_beforeEnq.dump_VCD(dt, backing.INST_b_serverAdapter_outData_beforeEnq);
  INST_b_serverAdapter_outData_dequeueing.dump_VCD(dt,
						   backing.INST_b_serverAdapter_outData_dequeueing);
  INST_b_serverAdapter_outData_enqw.dump_VCD(dt, backing.INST_b_serverAdapter_outData_enqw);
  INST_b_serverAdapter_outData_ff.dump_VCD(dt, backing.INST_b_serverAdapter_outData_ff);
  INST_b_serverAdapter_s1.dump_VCD(dt, backing.INST_b_serverAdapter_s1);
  INST_b_serverAdapter_s1_1.dump_VCD(dt, backing.INST_b_serverAdapter_s1_1);
  INST_b_serverAdapter_writeWithResp.dump_VCD(dt, backing.INST_b_serverAdapter_writeWithResp);
  INST_dim.dump_VCD(dt, backing.INST_dim);
  INST_done_a.dump_VCD(dt, backing.INST_done_a);
  INST_done_all.dump_VCD(dt, backing.INST_done_all);
  INST_done_b.dump_VCD(dt, backing.INST_done_b);
  INST_i.dump_VCD(dt, backing.INST_i);
  INST_output_res.dump_VCD(dt, backing.INST_output_res);
  INST_pos_a.dump_VCD(dt, backing.INST_pos_a);
  INST_pos_b.dump_VCD(dt, backing.INST_pos_b);
  INST_pos_out.dump_VCD(dt, backing.INST_pos_out);
  INST_ready_start.dump_VCD(dt, backing.INST_ready_start);
  INST_req_a_ready.dump_VCD(dt, backing.INST_req_a_ready);
  INST_req_b_ready.dump_VCD(dt, backing.INST_req_b_ready);
}
